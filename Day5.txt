Arrays

An array in Java is a container object that holds a fixed number of elements of a single data type.

Array is the collection of similar types of fixed number of data in continuous position(might be optional in java only).

In C and C++ we have pointers so definitely elements will be stored in continuous format.
In java we don't have pointers then there is a chance of elements might store in random places.

declaration-  int[] arr;         // preferred
              int arr[];         // valid, but less preferred

primitive and non-primitive-
primitive data types can't be splitted or divided. eg- int, float, char
Non-primitive datatypes can be divided. eg- string and all the objects that will be created by user. all the objects will be stored in heap memory, all the references will be stored in stack memory.

stack memory has less space compare to heap

class Node{
  public static void main(String args[]){
    datatype[] array_name;
     int a=10;
     int b=20;
     int c=30;
     int 4=40;

     int arr[]={10,12,14,16}
  }
}


instead of creating multiple variables create an array to store close values.
if you create multiple variables, do get the data simply we can print the variable.

when it comes to array if you want to print the data we can print using index values. And by default index values start with 0.

instantiation-  arr = new int[5];  // creates an array of size 5

initialization- int[] arr = {10, 20, 30, 40, 50}; // automatic initialization

accessing elements- System.out.println(arr[0]); // prints first element

Array Types
One-Dimensional: int[] a = new int[5];

Two-Dimensional: int[][] b = new int[3][4];

Jagged Arrays: Arrays of arrays with different lengths.

Default Values
int, float → 0

boolean → false

char → \u0000

Object references → null

Length Property-
arr.length gives the size of the array (no (), it's a property, not method).
in string it is string_name.length()

in java it is preferred to use camel case to write production level code.

void additionOfTwoNumbers{
}

Looping through array-
for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}

for (int x : arr) {
    System.out.println(x);  // enhanced for-loop
}


Limitations-
Fixed size once declared.

Only stores elements of the same type.

ArrayIndexOutOfBoundsException-
Accessing an invalid index (e.g., arr[5] when size is 5) throws this exception.


class Main{
  public static void main(String args){
      int arr[]={1,2,3,4,5};
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
       }

       for(int I : arr){
        System.out.println(arr[i]);
       }
  } 
}


toString is an inbuilt method to print an array
toString can accept only one arguments and that too is an array
class Main{
  public static void main(String args){
      int arr[]={1,2,3,4,5};
      
        System.out.println(Arrays.toString(arr + ""));
  } 
}

If the array type is int all the default values are 0's and if it is a string all the default values are null. And null is a literal.

whenever you are trying to assign or trying to get nth value of an array, we will get an exception called array out of bound.

Arrays are Objects
All arrays in Java are objects, even if they store primitives.

Arrays utility class 
java.util.Arrays
Arrays.sort(arr);
Arrays.fill(arr, 5);         // fills entire array with 5
Arrays.toString(arr);        // converts array to string
Arrays.equals(arr1, arr2);   // compares two arrays


import java.util.*;
public class Array {
    public static void main(String[] args){
        Scanner in=new Scanner(System.in);
        int arr[]=new int[5];
        System.out.println("Enter the values:- ");
        arr[0]=in.nextInt();
        arr[1]=in.nextInt();
        arr[2]=in.nextInt();
        arr[3]=in.nextInt();
        arr[4]=in.nextInt();

        int evencount=0;
        int oddcount=0;
        System.out.println("Enter the values:- ");
        for(int i=1;i<arr.length;i++){
            if(arr[i]%2==0){
                 evencount++;
                System.out.println("Evencount:- "+ evencount);
            }else{
                oddcount++;
                System.out.println("Oddcount:- "+ oddcount);
            }

        }

        int highestvalue=arr[0];
        int secondhighestvalue=arr[0];

        for(int i=1;i<arr.length;i++){
            if(arr[i]>highestvalue){
                highestvalue=arr[i];
            }
        }

        for(int i=1;i<arr.length;i++){
            if(arr[i]>secondhighestvalue && secondhighestvalue!=highestvalue){
                secondhighestvalue=arr[i];
            }
        }
        System.out.println(highestvalue);
        System.out.println(secondhighestvalue);

    }


}