Linked List 
Delete operation
Delete head Node 
Delete tail Node
Delete N^th Node
Delete by Value

Insert Operation
Insert head Node 
Insert tail Node
Insert at N^th Node
Insert  by Value

Here all implementation of this question
class Node{
    int data;
    Node next;
    
    Node(int data1){
        this.data= data1;
        this.next = null;
    }
    Node(int data1,Node next1){
        this.data = data1;
        this.next = next1;
    }
}
class Main {
    static Node convertArrayToLinkedlist(int[] arr){
        Node head = new Node(arr[0]);
        Node current = head;
        for(int i =1;i<arr.length;i++){
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }
        return head;
    }
    
    static Node deleteHead(Node head){
        Node temp = head;
        head = temp.next;
        
        return head;
    }
    static Node deleteTail(Node head){
        Node temp = head;
        while(temp.next.next!=null){
            temp = temp.next;
        }
        temp.next = null;
        
        return head;
    }
    static Node deleteNthNode(Node head,int n){
        Node temp = head;
        Node prev = null;
        int c = 1;
        
        while(temp!=null){
            if(c==n){
                prev.next = temp.next;
                temp.next = null;
            }
            prev = temp;
            temp= temp.next;
            c++;
        }
        return head;
    }
    static Node deleteByValue(Node head,int val){
        Node temp = head;
        Node prev = null;
        
        while(temp!=null){
            if(temp.data == val){
                prev.next = temp.next;
                temp.next = null;
            }
            prev = temp;
            temp= temp.next;
        }
        return head;
        
    }
    static Node insertAtHead(Node head,int val){
        Node newNode = new Node(val);
        newNode.next = head;
        head = newNode;
        return head;
    }
    static Node insertAtTail(Node head,int val){
        Node temp = head;
        Node newNode = new Node(val);
        while(temp.next!=null){
            temp = temp.next;
        }
        temp.next = newNode;
        return head;
    }
    static Node insertAtNthNode(Node head,int n,int val){
        Node temp = head;
        Node prev = null;
        int c = 1;
        
        while(temp!=null){
            Node newNode = new Node(val);
            
            if(c == n){
                newNode.next = temp;
                prev.next = newNode;
            }
            prev = temp;
            temp = temp.next;
            c++;
        }
        return head;
    }
    
    static Node insertByValue(Node head,int ele,int val){
        Node temp = head;
        Node prev = null;
        
        while(temp!=null){
            Node newNode = new Node(val);
            
            if(t
emp.data == ele){
                newNode.next = temp;
                prev.next = newNode;
            }
            prev = temp;
            temp = temp.next;
        }
        return head;
    }
    static void print(Node head){
        Node temp = head;
        while(temp!=null){
            System.out.print(temp.data + ((temp.next!= null) ? "->" :"null"));
            temp = temp.next;
        }
    }
    
    public static void main(String[] args) {
        int[] arr ={1,2,3,4,5};
        Node head = convertArrayToLinkedlist(arr);
        //print(head);
         head = deleteHead(head);
        print(head);
        System.out.println();
    }
}
Today question 
2095
237
876
