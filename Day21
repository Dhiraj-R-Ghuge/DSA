Sorting ------->
1)Bubble Sort 
2)Selectipn Sort
3)Insertion Sort 
4)Merge sort
5)Quick Sort 
6)Count Sort 
7)Heap Sort 
8)Radix Sort

Sort The element in less time .
_____________________________________
|Base Case |Aveage Case |Worst Case | 
|          |            |           |__________________
| O(n)     |    O(n^2)  |    O(n^2) |Bubble Sort        |
| O(n^2)   |  O(n^2)    | O(n^2)    |Selection Sort     |
|  O(n)    |O(n^2)      |O(n^2)     |Insertion sort     |
|  O(nlogn)|O(n log n)  |O(n logn)  |Merger Sort        |
|  O(nlogn)|  O(nlogn)  |  O(n^2)   |Quick Sort         |
|_______________________________________________________|         

<----Bubble Sort---->
It will compare the adjecent element and it will swap accordingly after an iteration the weightest and lighest element will go to end.
taken input array which is unsorted [3 2 5 9 8]

class Main {
    static void swap(int []arr,int i ,int j){
        int temp =arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
        }
        
    public static void main(String[] args) {
      int []arr={5,3,4,2,1};
      int n=arr.length;
      for(int i=0; i<n-1;i++){
          for(int j=i+1; j<n; j++){
              if(arr[i]> arr[j]){
                  swap(arr,i,j);
              }
          }
      }
          System.out.print(Arrays.toString(arr));
     
    }
}
}

<----Selction Sort----> 
class Main {
    public static void main(String[] args) {
        int[] arr = {5, 3, 4, 2, 1};
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            int smallIndex = i;

            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[smallIndex]) {
                    smallIndex = j;
                }
            }

        
            int temp = arr[smallIndex];
            arr[smallIndex] = arr[i];
            arr[i] = temp;
        }

        
            System.out.print(Arrays.toString(arr));
        }
    }
}
we check it array is sorted or not
Stack & Queue:
stack is special data structure which follow last in first out and it comes under linear data strucutre
will get the all the output constant time for all stack operation O(1)

Push operation 
Pop operation 
peek method
isempty()
display() && size()
push:-adding the element into the stack.
pop:-deleting the last element in stack.
peek:-getting top most element in stack.
isempty:-cheking the stack  booelan true or false.\
display:-printing all the element now see the size .
--->In the push method we initialize the top value is -1
push(int a) then creating a stack and adding the element using top= top+1;

-->In pop method we creating a stack and remove the element using top=top-1;

-->In peek method  given stack we just return top then it print top element ;

example
import java.util.*;

class Main {
    static int push(int[] arr, int top, int ele) {
        if (top < arr.length - 1) {
            top = top + 1;
            arr[top] = ele;
        } else {
            System.out.println("Stack is full..!");
        }
        return top;
    }

    static int pop(int[] arr, int top) {
        if (top > -1) {
            System.out.println("Popped: " + arr[top]);
            top = top - 1;
        } else {
            System.out.println("Stack is empty..!");
        }
        return top;
    }

    static void peek(int[] arr, int top) {
        if (top == -1) {
            System.out.println("Stack is empty..!");
        } else {
            System.out.println("Top element: " + arr[top]);
        }
    }

    static boolean isEmpty(int top) {
        return top == -1;
    }

    static int size(int top) {
        return top + 1;
    }

    static void display(int[] arr, int top) {
        if (top == -1) {
            System.out.println("Stack is empty..!");
        } else {
            System.out.print("Stack elements: ");
            for (int i = 0; i <= top; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[] arr = new int[5];
        int top = -1;

        top = push(arr, top, 1);
        top = push(arr, top, 2);
        top = push(arr, top, 3);
        top = pop(arr, top);
        peek(arr, top);
        System.out.println("Size: " + size(top));
        System.out.println("Is Empty? " + isEmpty(top));
        display(arr, top);
    }
}

<------Queue------>

Queue is special data structure which follow first in first out and it comes under linear data strucutre
Types of queue 
Single ended queue and double ended queue/priority queue
1)we can perform the opetion form single side
2)we can perform the opeatio both the side
3)priority queue (most imp)-- which help to solve heaps problem .two more things min queue , max queue: 
min queue:-whatever order of element your added element will arrange in ascending order.
max queue:-whatever oder if element you added the element will arrange in desecending order .

Queue Method :-Offer  it is use to add element i our queue
poll :- 
peek:-





 
