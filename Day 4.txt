conditional statement example :
import java.util.*;
class Main{
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        if(n==1){
            System.out.println("Monday");
        }
        else if(n==2){
            System.out.println("Tuesday");
        }
        else if(n==3){
            System.out.println("Wednesday");
        }
        else{
            System.out.println("sunday");
        }
        
    }
}

*****Switch Case*******:
Notes:
-Cases have to be the same type as expressions, must be a constant or literal
-duplicate case values are not allowed 
-break is use to terminate the sequence 
-if break is not used ,it will continue to next case 
-default will execute when none of the above does 
-if default is not at the end ,put break after it


import java.util.*;
        public class DaysOfWeek {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        if (n > 7) {
            System.out.println("Please enter a number less than or equal to 7.");
            return;
        }
        for (int day = 1; day <=n ; day++) {
            
            switch (day) {
                case 1->System.out.println("Monday");
                case 2->System.out.println("Tuesday");
                case 3->System.out.println("Wednesday");
                case 4->System.out.println("Thursday");
                case 5->System.out.println("Friday");
                case 6->System.out.println("Saturday");
                case 7->System.out.println("Sunday");
                default->System.out.println("Invalid day");
            }
        }
    }
}


***********Ternary Operator************

int n=5;
if(n==5){
System.out.println("yes");
}
else{
System.out.println("no");
}


condition  ? statement 1: statement 2;
class Main {
    public static void main(String[] args) {
        int n=5;
        String res=(n==5) ? ("yes"): ("no");
        System.out.println(res);

    }
}

""In collection  we don't have index value in those situation we have to use for each loop""

class Main {
    public static void main(String[] args) {
        int []arr={1,2,3,4,5};
        for(int var:arr){
        
        System.out.println(var);

        }
    }
}


problem to solve 
sum of interger
public class DigitSum {
    public static void main(String[] args) {
        int num = 78945623;

        // Step 1: Repeat until num is a single-digit number
        while (num >= 10) {
            int sum = 0;

            // Step 2: Extract and sum the digits
            while (num > 0) {
                sum += num % 10;  // Get last digit
                num /= 10;        // Remove last digit
            }

            // Step 3: Replace original number with sum
            num = sum;
        }

        // Step 4: Print the final single-digit result
        System.out.println("Final single-digit sum: " + num);
    }
}

     1
    123
    1235

"""from top to bottom (*) """"

class Main{
    public static void main(String []args){
        int n=5;
        for(int i =n; i>=1; i--){
            for(int j=1; j<=i;j++){
                System.out.print("*");
            }
            
            
            System.out.println("");
        }
        
    }
}
pyramid pattern
class Main{
    public static void main(String []args){
        int n=5;
        for(int i =1; i<=5; i++){
            for(int j=1; j<=(n-i);j++){
                System.out.print(" ");
            }
             for(int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            
            
            System.out.println("");
        }
        
    }
}

***pyramid pattern of right side
 *
  ***
   *****
    *******
     *********
     *********
    *******
   *****
  ***
 *

class Main{
    public static void main(String []args){
  for(int i=1;i<=5; i++){
      for(int j=1; j<=i; j++){
          System.out.print(" ");
      }
      for(int j=1; j<=(2*i-1); j++){
           System.out.print("*");
      }
       System.out.println();
  }
  
  for(int i=5;i>=1; i--){
      for(int j=1; j<=i; j++){
          System.out.print(" ");
      }
      for(int j=1; j<=(2*i-1); j++){
           System.out.print("*");
      }
       System.out.println();
  }
    }
}

kite pyramid 
   * 
   * * 
  * * * 
 * * * * 
* * * * * 
 * * * * 
  * * * 
   * * 
    * 
public class KitePyramidPattern {
    public static void main(String[] args) {
        int n = 5; // height of the pyramid

        // Upper half of the kite
        for (int i = 1; i <= n; i++) {
            // Print spaces
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            // Print stars with a space
            for (int k = 1; k <= i; k++) {
                System.out.print("* ");
            }
            System.out.println();
        }

        // Lower half of the kite
        for (int i = n - 1; i >= 1; i--) {
            // Print spaces
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            // Print stars with a space
            for (int k = 1; k <= i; k++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

  

    
